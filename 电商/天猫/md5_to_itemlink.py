import hashlib
import redis

url="https://detail.tmall.com/item.htm?abbucket=10&id=741830873976&rn=6a87064040bd23dd8bd942e848f59683&sku_properties=1627207:24946378100&spm=a1z10.5-b-s.w4011-18694600216.97.702a1fc6hLdih0"
print(hashlib.md5(url.encode()).hexdigest())

# id_list1=['724573480683', '725038526985', '724838351546', '725273078131', '725128105811', '725262853029', '724610363525', '724608123039', '725083784118', '725177362876', '724900112514', '725020186508', '725266538482', '724639832254', '725081876462', '724958026299', '724789987073', '725257853386', '725399928041', '725617621449', '725403232056', '725445223839', '725454570299', '725473558241', '725492722446', '725634279140', '725315289347', '725279837718', '725474878999', '725640551146', '725585213440', '725642775784', '725490442645', '725443895937', '725441051010', '725444734842', '725297602559', '725442527493', '725419870803', '725381652905', '725763666861', '725669739849', '726088378469', '726098714732', '725884996640', '725645083225', '726097978401', '725759842048', '725903888101', '725902436741', '725914755088', '726103347427', '725938613438', '725961365625', '726070488792', '725753394166', '725712464600', '725952493993', '725927379716', '726084935413', '726103329624', '725763370384', '726969759462', '726525893867', '726623451686', '727008285898', '726745679559', '726781912161', '726783180271', '726106911353', '726314521766', '726246919692', '727007229720', '726603547306', '726267610484', '726575707655', '726269999989', '726293110046', '726624360713', '726463439991', '726780840524', '726982006138', '726601427969', '727430958272', '728135704306', '727992664373', '727986228407', '728307717909', '727394328315', '727320599221', '727290590016', '727467871675', '727403764192', '727471671866', '727759114014', '728347486098', '727466467615', '728519947162', '728221029558', '728345254351', '728443090366', '727668948375', '728371657038', '727148015976', '728336798253', '729435326702', '729557127344', '729431230717', '729148447031', '729047948703', '729275485291', '729067848827', '729418214642', '729273851882', '728525167809', '729244612615', '729086044211', '729090116039', '729076540968', '729441670410', '729285405887', '728941676684', '728668178049', '729052420941', '728618215270', '729281161183', '730000338676', '729843998697', '729998377575', '729790524887', '729695141216', '729745575026', '729755435621', '729997982978', '729582010894', '729874317834', '729993485339', '729989715913', '729992683113', '729604751095', '729575278005', '729740907694', '730009098526', '729838416875', '730159962774', '730624635502', '730039121338', '730460770334', '730611529331', '730571466470', '730350047694', '730443121661', '730344275145', '730297818082', '730298570433', '730035445328', '730011694093', '730417968402', '730459423368', '730290586020', '730028410049', '730051085185', '731219825286', '730726636541', '730757466300', '731051799359', '731123912755', '731315629402', '731163241911', '730969488842', '731341709171', '731176938675', '730667696152', '731318725238', '731194355986', '730843772042', '730678864210', '731261940333', '731166937812', '730764094900', '730904785308', '730740738255', '731453370835', '731635315929', '731590876310', '731457925869', '731731924057', '731627995888', '731366495426', '731568720851', '731348491462', '731571268399', '731496601725', '731462500832', '731460225728', '731470802328', '731365257381', '731348889916', '731501802064', '731746092292', '731588464139', '731619514681', '731654189407', '731774914257', '731782463591', '731943290298', '731906877603', '731822837482', '731808049524', '731896188953', '732072747098', '731961886510', '731768619085', '731954543489', '732038862070', '731947528221', '732071018691', '731766569040', '731938223869', '731899912592', '731787362575', '731758157524', '731770639552', '732133520542', '732199755495', '732117192043', '732228600800', '732091195870', '732141053850', '732084691855', '732196570006', '732151789961', '732220603205', '732193042715', '732239014720', '732234379868', '732119132594', '732282697709', '732339867877', '732419982680', '732415258230', '732296345336', '732343183213', '732617087546', '732271608687', '732437794094', '732408464751', '732456165032', '732358391165', '732432327889', '732291617317', '733128544748', '733147872727', '732890459868', '732744811841', '733116328722', '733145736707', '733368092949', '733294633629', '733389247185', '733149476593', '733505120801', '733222876841', '733394988046', '733504024007', '733421136782', '733431129488', '733283217124', '733711083794', '733565497562', '733570981139', '733686532974', '733601707387', '733558962203', '733616073069', '733592449360', '733572405971', '733688131990', '733673800617', '733556205830', '733595684817', '733705631005', '733706293279', '733538842611', '733536576905', '733563351506', '733693074227', '733726121295', '733860314257', '733883282014', '733858187833', '733736114174', '733716306560', '733893024854', '733932272368', '733993534628', '734053447274', '733856147588', '733891303368', '733831894459', '733965615403', '734040260873', '733712035733', '734037244335', '733743078572', '733854211001', '733820150894', '733870704692', '733902040781', '733888143426', '733894988276', '734236757018', '734256789031', '734253093878', '734084429221', '734227625714', '734141057768', '734138881830', '734243649584', '734108296290', '734064705353', '734235693993', '734231897180', '734198234011', '734194846556', '734077717776', '734226736599', '734258061927', '734061280677', '734253428189', '734221894084', '734204082821', '734340955146', '734419636694', '734433225751', '734351462970', '734337003106', '734367008412', '734381056136', '734264254003', '734350871178', '734345427817', '734398595267', '734347051115', '734359862331', '734386970123', '734409269060', '734447953399', '734371604784', '734304457040', '734370370578', '734396063298', '734258298711', '734529714278', '734563391745', '734668583129', '734727417095', '734718705970', '734521636483', '734559391935', '734564478771', '734719382558', '734594329958', '734527463791', '734545203675', '734559849359', '734621609561', '734660835110', '734570026170', '734619785726', '734687311989', '734664911047', '734621249372', '735041978527', '735063912459', '734989587023', '735063608758', '735061608701', '734861086828', '734901569905', '734850070716', '734866959906', '734910645390', '734839267188', '734871943614', '735050488945', '734730329196', '735056472127', '734851034898', '735012812584', '734884507761', '734919125801', '735221344256', '735354301227', '735211192753', '735222616982', '735216885558', '735333868164', '735355541436', '735146735710', '735339377377', '735171847767', '735219236678', '735325978305', '735351529209', '735336776979', '735169212856', '735205557674', '735215700817', '735254037719', '735167908903', '735394421133', '735396124981', '735397017588', '735462562898', '735509306579', '735530069625', '735542817018', '735506843849', '735384712537', '735461207328', '735503160504', '735469895608', '735358513244', '735549085231', '735523138793', '735460110337', '735537041656', '735359408340', '735746917701', '735669422379', '735772113847', '735560561185', '735743985757', '735660783242', '735659298940', '735592179500', '735676402532', '735729093448', '735632814392', '735746480978', '735637242678', '735633518976', '735706804800', '735569857189', '735599387955', '735550684934', '735708114719', '735564332926', '735837191154', '735827935342', '735985695346', '735871786701', '735840818486', '735800946846', '735983011711', '735927969724', '735895125423', '735862976592', '735929201801', '735882474305', '735822135130', '735875342852', '735786659868', '735845251194', '735931229520', '736180486442', '736182807620', '736185306622', '736192722804', '736106329640', '736077185224', '736003351921', '736108113429', '736087189746', '736050286941', '736072500894', '735994882745', '736116553033', '736047074509', '736049801047', '736095656040', '736057685553', '736048758405', '736405166326', '736237021657', '736312915477', '736197362628', '736376778864', '736513995300', '736517480237', '736410142931', '736247945846', '736218578496', '736373674884', '736319815187', '736265985764', '736323283174', '736363367188', '736476183106', '736292521401', '736545331685', '736544691774', '736700601588', '736535636619', '736630041744', '736556116653', '736562428246', '736541643023', '736539635864', '736607817905', '736542368353', '736558588979', '736864710094', '736804899613', '736850630766', '736743678257', '736869042820', '736836762696', '736764909991', '736887394987', '736757889169', '736822846091', '736732608552', '736823354661', '736859103101', '736722544803', '736825058452', '736879175156', '736810218263', '736892172373', '736828634966', '736857994667', '736722370333', '736895484017', '736847878283', '737005074256', '736943885021', '737059222586', '737140817254', '737001343478', '736973695558', '736935677811', '736950936950', '737162948127', '737040554447', '736968968685', '737146723802', '736970431032', '737146848175', '736942247477', '736998435708', '736953767724', '736982939622', '736992735277', '737131863310', '737143187449', '737120005636', '737138732601', '736973048924', '737324139926', '737193790117', '737270882459', '737216839948', '737178970438', '737202711152', '737210110397', '737361578367', '737206703975', '737198506716', '737269878420', '737331699139', '737266837165', '737234982522', '737212343207', '737181494283', '737216018964', '737196766022', '737166743338', '737222870536', '737231594956', '737196987660', '737354794975', '737317427623', '737395886040', '737397851650', '737564839153', '737563259829', '737430590444', '737538251252', '737590451609', '737371206634']
# del_md5_urls=[]
# for id in id_list1:
#     url="https://item.taobao.com/item.htm?id={}&spm=a1z10.3-c-s.w4002-23122658373.15.f673658dYDxNiu".format(id)
#     del_md5_urls.append(hashlib.md5(url.encode()).hexdigest())
#
# class MyRedis():
#     def __init__(self):  # 构造函数
#         try:
#             self.r = redis.Redis(host="127.0.0.1", password="", port=6379, db=6)  # 连接redis固定方法,这里的值必须固定写死
#         except Exception as e:
#             print('redis连接失败,错误信息%s' % e)
#
#     def str_get(self, k):
#         res = self.r.get(k)  # 会从服务器传对应的值过来，性能慢
#         if res:
#             return res.decode()  # 从redis里面拿到的是bytes类型的数据，需要转换一下
#
#     def str_set(self, k, v, time=None):  # time默认失效时间
#         self.r.set(k, v, time)
#
#     def delete(self, k):
#         tag = self.r.exists(k)
#         # 判断这个key是否存在,相对于get到这个key他只是传回一个存在火灾不存在的信息，
#         # 而不用将整个k值传过来（如果k里面存的东西比较多，那么传输很耗时）
#         if tag:
#             self.r.delete(k)
#         else:
#             print('这个key不存在')
#
#     def hash_get(self, name, k):  # 哈希类型存储的是多层字典（嵌套字典）
#         res = self.r.hget(name, k)
#         if res:
#             return res.decode()  # 因为get不到值得话也不会报错所以需要判断一下
#
#     def hash_set(self, name, k, v):  # 哈希类型的是多层
#         self.r.hset(name, k, v)  # set也不会报错
#
#     def hash_getall(self, name):
#         res = self.r.hgetall(name)  # 得到的是字典类型的，里面的k,v都是bytes类型的
#         data = {}
#         if res:
#             for k, v in res.items():  # 循环取出字典里面的k,v，在进行decode
#                 k = k.decode()
#                 v = v.decode()
#                 data[k] = v
#         return data
#
#     def hash_del(self, name, k):
#         res = self.r.hdel(name, k)
#         if res:
#             print('删除成功')
#             return 1
#         else:
#             print('删除失败,该key不存在')
#             return 0
#
#     @property  # 属性方法，
#     # 使用的时候和变量一个用法就好比实例，A=MyRedis(), A.clean_redis使用，
#     # 如果不加这个@property,使用时A=MyRedis(), A.clean_redis()   后面需要加这个函数的括号
#     def clean_redis(self):
#         self.r.flushdb()  # 清空 redis
#         print('清空redis成功!')
#         return 0
#
# if __name__ == '__main__':
#     del_urls=MyRedis()
#     for urls in del_md5_urls:
#         del_urls.delete(urls)